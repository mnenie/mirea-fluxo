name: Deployment

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

on:
  workflow_run:
    workflows: [CI]
    types:
      - completed
  push:
    branches:
      - master
      - client
      - server
  pull_request:
    branches:
      '**'

jobs:
  preview:
    runs-on: ubuntu-latest
    if: github.ref != 'refs/heads/master'
    steps:
      - uses: actions/checkout@v4
      - run: corepack enable
      - run: npm install --global vercel@latest
      - run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
      - run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
      - run: vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}

      - name: preview gh deployment
        id: create_deployment_preview
        run: |
          response=$(curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -d '{
              "ref": "${{ github.sha }}",
              "environment": "preview",
              "description": "Preview deployment",
              "auto_merge": false,
              "required_contexts": []
            }' \
            https://api.github.com/repos/${{ github.repository }}/deployments)
          echo "deployment_id=$(echo $response | jq -r .id)" >> $GITHUB_ENV

      - name: preview gh deployment status
        run: |
          curl -X PATCH \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -d '{
              "state": "success",
              "description": "Preview deployment completed successfully"
            }' \
            https://api.github.com/repos/${{ github.repository }}/deployments/${{ env.deployment_id }}

  production:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v4
      - run: corepack enable
      - run: npm install --global vercel@latest
      - run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
      - run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
      - run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: production gh deployment
        id: create_deployment_prod
        run: |
          response=$(curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -d '{
              "ref": "${{ github.sha }}",
              "environment": "production",
              "description": "Production deployment",
              "auto_merge": false,
              "required_contexts": []
            }' \
            https://api.github.com/repos/${{ github.repository }}/deployments)
          echo "deployment_id=$(echo $response | jq -r .id)" >> $GITHUB_ENV

      - name: production gh deployment status
        run: |
          curl -X PATCH \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -d '{
              "state": "success",
              "description": "Production deployment completed successfully"
            }' \
            https://api.github.com/repos/${{ github.repository }}/deployments/${{ env.deployment_id }}
